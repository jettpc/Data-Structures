package Euler;

public class P12_Highly_divisible_traingular_number {

    /**
     * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
     *
     * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
     *
     * Let us list the factors of the first seven triangle numbers:
     *
     *  1: 1
     *  3: 1,3
     *  6: 1,2,3,6
     * 10: 1,2,5,10
     * 15: 1,3,5,15
     * 21: 1,3,7,21
     * 28: 1,2,4,7,14,28
     * We can see that 28 is the first triangle number to have over five divisors.
     *
     * What is the value of the first triangle number to have over five hundred divisors?
     */

    public static void main(String[] args) {
        int answer = fiveHundredDivisors();

    }

    public static int fiveHundredDivisors() {
        int number = 0;
        int i = 1;

        while(numOfFactors(number) < 500) {
            number += i;
            i++;
        }
        System.out.println(number);
        return 1;
    }

    public static int numOfFactors(int factorMe) {

        int counter = 0;
        int sqrt = (int) Math.sqrt(factorMe);
        for(int i = 1; i <= sqrt; i++) {
            if(factorMe % i == 0) {
                counter += 2;
            }
        }
        //correction if the number is a perfect square
        if(sqrt * sqrt == factorMe) {
            counter--;
        }
        return counter;
    }
}
